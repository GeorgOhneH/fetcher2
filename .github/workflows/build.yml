on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  #  lints:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - run: sudo apt-get install libgtk-3-dev
  #      - uses: actions/cache@v1
  #        with:
  #          path: ~/.cargo/registry
  #          key: '${{ runner.os }}-cargo-registry-${{ hashFiles(''**/Cargo.lock'') }}'
  #      - uses: actions/cache@v1
  #        with:
  #          path: ~/.cargo/git
  #          key: '${{ runner.os }}-cargo-index-${{ hashFiles(''**/Cargo.lock'') }}'
  #      - uses: actions/cache@v1
  #        with:
  #          path: target
  #          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
  #      - uses: actions-rs/toolchain@v1
  #        with:
  #          profile: minimal
  #          toolchain: nightly
  #          override: true
  #          components: 'rustfmt, clippy'
  #      - uses: actions-rs/cargo@v1
  #        with:
  #          command: fmt
  #          args: '--all -- --check'
  #      - uses: actions-rs/cargo@v1
  #        with:
  #          command: clippy
  #          args: '-- -D warnings'
  version:
    runs-on: ubuntu-latest
    outputs:
      latest_release: ${{ steps.release_info.outputs.latest_release }}
      current_version: ${{ steps.release_info.outputs.current_version }}
    steps:
      - uses: actions/checkout@master

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v1

      - name: Install cargo-get
        run: cargo install cargo-get

      - id: release_info
        run: |
          LATEST_RELEASE="$(curl -s https://api.github.com/repos/GeorgOhneH/ethz-document-fetcher/releases/latest | jq -r '.tag_name')"
          CURRENT_VERSION="$(cargo get --root ./fetcher2 version --pretty)"

          echo "::set-output name=latest_release::$LATEST_RELEASE"
          echo "::set-output name=current_version::$CURRENT_VERSION"
        shell: bash
#  build:
#    needs:
#      - version
#    if: (needs.version.outputs.latest_release != needs.version.outputs.current_version)
#    runs-on: '${{ matrix.os }}'
#    strategy:
#      matrix:
#        include:
#          - os: macos-latest
#            target: x86_64-apple-darwin
#            suffix: ''
#          - os: ubuntu-latest
#            target: x86_64-unknown-linux-gnu
#            suffix: ''
#          - os: windows-latest
#            target: x86_64-pc-windows-msvc
#            suffix: .exe
#    steps:
#      - uses: actions/checkout@v2
#
#      - uses: actions-rs/toolchain@v1
#        with:
#          profile: minimal
#          toolchain: nightly
#          override: true
#
#      - uses: Swatinem/rust-cache@v1
#
#      - if: ${{ runner.os == 'Linux' }}
#        run: sudo apt-get install libgtk-3-dev
#
#      - name: Build Release
#        run: cargo build --release
#
#      - name: Bundle macOS Release
#        run: |
#          cargo install cargo-bundle
#          cargo bundle --release
#        working-directory: fetcher2_gui
#        if: ${{ runner.os == 'macOS' }}
#
#      - name: Create .dmg File
#        run: |
#          hdiutil create fetcher2-uncompressed.dmg -volname "fetcher2" -srcfolder target/release/bundle/osx
#          hdiutil convert fetcher2-uncompressed.dmg -format UDZO -o fetcher2-x86_64.dmg
#        if: ${{ runner.os == 'macOS' }}
#
#
#      - name: Make Linux Binary Executable
#        run: chmod +x target/release/fetcher2_gui
#        if: ${{ runner.os == 'Linux' }}
#
#      - uses: actions/upload-artifact@v2
#        with:
#          name: fetcher2-${{ matrix.target }}
#          path: target/release/fetcher2_gui${{ matrix.suffix }}
#
#      - uses: actions/upload-artifact@v2
#        with:
#          name: fetcher2-x86_64.dmg
#          path: ./fetcher2-x86_64.dmg
#        if: ${{ runner.os == 'macOS' }}

#  release:
#    if: github.ref == 'refs/heads/master'
#    needs:
#      - build
#      - version
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/download-artifact@master
#        with:
#          name: fetcher2-x86_64-unknown-linux-gnu
#          path: ./fetcher2-x86_64-unknown-linux-gnu/
#      - uses: actions/download-artifact@master
#        with:
#          name: fetcher2-x86_64-apple-darwin
#          path: ./fetcher2-x86_64-apple-darwin/
#      - uses: actions/download-artifact@master
#        with:
#          name: fetcher2-x86_64-pc-windows-msvc
#          path: ./fetcher2-x86_64-pc-windows-msvc/
#
#      - uses: actions/download-artifact@master
#        with:
#          name: fetcher2-x86_64.dmg
#          path: ./fetcher2-x86_64/
#      - run: ls -R
#      - id: create_release
#        uses: actions/create-release@v1.0.0
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ needs.version.outputs.current_version }}
#          release_name: Release ${{ needs.version.outputs.current_version }}
#          draft: false
#          prerelease: false
#      - uses: actions/upload-release-asset@v1.0.1
#        env:
#          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
#        with:
#          upload_url: '${{ steps.create_release.outputs.upload_url }}'
#          asset_path: ./fetcher2-x86_64-unknown-linux-gnu/fetcher2_gui
#          asset_name: fetcher2-x86_64-unknown-linux-gnu
#          asset_content_type: application/octet-stream
#      - uses: actions/upload-release-asset@v1.0.1
#        env:
#          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
#        with:
#          upload_url: '${{ steps.create_release.outputs.upload_url }}'
#          asset_path: ./fetcher2-x86_64-apple-darwin/fetcher2_gui
#          asset_name: fetcher2-x86_64-apple-darwin
#          asset_content_type: application/octet-stream
#      - uses: actions/upload-release-asset@v1.0.1
#        env:
#          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
#        with:
#          upload_url: '${{ steps.create_release.outputs.upload_url }}'
#          asset_path: ./fetcher2-x86_64-pc-windows-msvc/fetcher2_gui.exe
#          asset_name: fetcher2-x86_64-pc-windows-msvc.exe
#          asset_content_type: application/octet-stream
#
#      - uses: actions/upload-release-asset@v1.0.1
#        env:
#          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
#        with:
#          upload_url: '${{ steps.create_release.outputs.upload_url }}'
#          asset_path: ./fetcher2-x86_64/fetcher2-x86_64.dmg
#          asset_name: fetcher2-x86_64.dmg
#          asset_content_type: application/octet-stream